############### 这一段代码的行为很迷惑呀？难道是标准化 #################
def normlization(v, l):
    if len(v) > l:
        return v[:l]
    if len(v) < l:
        for i in range(l - len(v)):
            v.append(v[-2])
        return v


############## 产生随机数量的随机数。这是最需要修改的地方 ##################
def generate_random_num(): # 随机产生1或-1
    n = np.random.rand()
    if n >= 0.5:
        return 1
    if n < 0.5:
        return -1

############### 需要标明传入的变量类型及含义。除了输入的四个变量外，还有x1,xx1,x3,xx3这种不明含义的中间变量 ####################
def find_shortest_path(cuoqi,cuozhong,gps_start,gps_destination): ## 寻找某点到V最短距离
    route = []
    x1 = np.array(x)
    xx1 = np.array(xx)
    x3 = np.array(x2)
    xx3 = np.array(xx2)
    for i in range(len(x1)):
        l = abs(x1 - xx1[i])  # 求出x1全体对xx1某值的差值
        position = np.where(l == min(l))[0]
        l2 = abs(x3 - xx3[i])  # 求出x3全体对xx3某值的差值
        position2 = np.where(l2 == min(l2))[0]
        p = [i for i in position if i in position2]  # 查找相同值
        if len(p) != 0:
            p0 = p[0]
            route.append(p0)  # p有值则填入route
            x1[p0] = 0
            x3[p0] = 0
        if len(p) == 0:
            p0 = 0
            route.append(p0)
    print(route)
    return route
    
    
############### 这里先用直线距离进行简化。最终结题时一定要换很多种找最短路径的方法 #############
def find_shortest_path_simple(gps_start_position,gps_NextCar_start_position,gps_destination):
    res = 100 # res代表speed吗？
    num = -1 # num为何从-1开始
    for i in range(0, len(gps_destination), 2):
        distance = (gps_start_position - gps_destination[i]) ** 2 + (gps_NextCar_start_position - gps_destination[i + 1]) ** 2
        if distance < res:
            res = distance
            num = i
    # print(num)
    return res, num

def Distra():
    pass

def Q_():
    pass
